// src/modules/auth/auth.service.ts
import { Injectable, BadRequestException, UnauthorizedException, NotFoundException, InternalServerErrorException } from '@nestjs/common';
import { RegisterDto } from './dtos/register.dto';
import { LoginDto, TokenDto } from './dtos/login.dto';
import { ForgotDto } from './dtos/forgot.dto';
import { ResetPassword1Dto, ResetPassword2Dto } from './dtos/reset-password.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { User } from './entities/user.entity';
import { Like, Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';
import { MailerService } from '../mailer/mailer.service';
import { v4 as uuidv4 } from 'uuid';
import { UpdateProfileDto } from './dtos/update-profile.dto';
import { Post } from '../posts/entities/post.entity';
import { FullReponsePostDto, LiteReponsePostDto, ReponseUserDto, ReponseUserProfileDto } from '../posts/dtos/create-post.dto';
import { ChangePasswordDto } from './dtos/change-password.dto';
import { v2 as cloudinary } from 'cloudinary';
import { Readable } from 'stream';
import * as fileType from 'file-type';
import { randomInt } from 'crypto';
import { GetRecipeDto } from './dtos/aichef.dto';
import { get } from 'axios';

@Injectable()
export class AuthService {
  [x: string]: any;
  constructor(
    @InjectRepository(User) private usersRepository: Repository<User>,
    @InjectRepository(Post) private postsRepository: Repository<Post>,
    private jwtService: JwtService,
    private mailerService: MailerService,
  ) {
    cloudinary.config({
      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
      api_key: process.env.CLOUDINARY_API_KEY,
      api_secret: process.env.CLOUDINARY_API_SECRET,
    })
  }
  async getUserIdFromToKen(token: string): Promise<number> {
    const payload = this.jwtService.decode(token);
    return payload['sub'];
  }
  async register(registerDto: RegisterDto, baseUrl: string): Promise<any> {
    
    try {
      let { username, email, password, name } = registerDto;
      if(name === null || name === undefined){
        name = "Ham ƒÉn " + randomInt(10000, 99999);
      }
      const existingUser = await this.usersRepository.findOne({ where: [{ email }, { username }] });

      if (existingUser?.isActive) {
        throw new BadRequestException('Email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.');
      }
      if(existingUser){
        await this.usersRepository.delete(existingUser.id);
      }
      const hashedPassword = await bcrypt.hash(password, 10);


      const user = this.usersRepository.create({
        username,
        email,
        name,
        password: hashedPassword,
        isActive: false,
        verificationToken: uuidv4(),
      });

      await this.usersRepository.save(user);
      const url = `${baseUrl}/auth/verify-email?token=${user.verificationToken}`;
      await this.mailerService.sendVerificationEmail(user.username, user.email, user.verificationToken, baseUrl);

      return { message: 'ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.'};
    } 
    catch (error) {
      if (error instanceof BadRequestException) {
      throw error;
      }
      console.log(error);
      throw new BadRequestException('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng k√Ω.');
    }
  }

  async login(loginDto: LoginDto): Promise<any> {
    const { username, password, tokenFCM } = loginDto;
    const user = await this.usersRepository.findOne({ where: { username } });

    if (!user) {
      throw new UnauthorizedException('Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.');
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      throw new UnauthorizedException('Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.');
    }

    if (!user.isActive) {
      throw new UnauthorizedException('T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c.');
    }

    const payload = { sub: user.id, username: user.username, roles: user.roles };
    const token = this.jwtService.sign(payload);

    if(tokenFCM !== null && tokenFCM !== undefined){
      user.tokenFCM = tokenFCM;
      await this.usersRepository.save(user);
    }
    return { access_token: token, message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', user: new ReponseUserDto(user) };
  }

  async verifyEmail(token: string): Promise<string> {
    const user = await this.usersRepository.findOne({ where: { verificationToken: token } });
    
    if (!user) {
      return `
        <!DOCTYPE html>
        <html lang="vi">
          <head>
            <meta charset="UTF-8">
            <title>X√°c Th·ª±c Email - L·ªói</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
          </head>
          <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f0f2f5; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh;">
            <div style="max-width: 600px; background-color: #ffffff; padding: 40px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); text-align: center;">
              <div style="font-size: 50px; color: #e74c3c; margin-bottom: 20px;">‚ùå</div>
              <h1 style="color: #333333; margin-bottom: 20px;">X√°c Th·ª±c Email Th·∫•t B·∫°i</h1>
              <p style="color: #555555; font-size: 16px; line-height: 1.6;">
                Li√™n k·∫øt x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i email x√°c th·ª±c ho·∫∑c li√™n h·ªá h·ªó tr·ª£.
              </p>
              <footer style="margin-top: 40px; color: #888888; font-size: 14px;">&copy; 2024 CookBook. T·∫•t c·∫£ c√°c quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</footer>
            </div>
          </body>
        </html>
      `;
    }
  
    user.isActive = true;
    user.verificationToken = null;
    await this.usersRepository.save(user);
  
    return `
      <!DOCTYPE html>
      <html lang="vi">
        <head>
          <meta charset="UTF-8">
          <title>X√°c Th·ª±c Email Th√†nh C√¥ng</title>
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
        </head>
        <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f0f2f5; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh;">
          <div style="max-width: 600px; background-color: #ffffff; padding: 40px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); text-align: center;">
            <div style="font-size: 50px; color: #28a745; margin-bottom: 20px;">‚úÖ</div>
            <h1 style="color: #333333; margin-bottom: 20px;">üéâ Email X√°c Th·ª±c Th√†nh C√¥ng!</h1>
            <p style="color: #555555; font-size: 16px; line-height: 1.6;">
              <strong>Username:</strong> ${user.username}<br>
              <strong>Email:</strong> ${user.email}
            </p>
            <p style="color: #555555; font-size: 16px; line-height: 1.6;">
              C·∫£m ∆°n b·∫°n ƒë√£ x√°c th·ª±c email c·ªßa m√¨nh. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ truy c·∫≠p ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa CookBook v√† b·∫Øt ƒë·∫ßu kh√°m ph√° nh·ªØng c√¥ng th·ª©c n·∫•u ƒÉn tuy·ªát v·ªùi!
            </p>
            <a href="https://www.cookbook.com" style="display: inline-block; padding: 12px 24px; background-color: #28a745; color: #ffffff; text-decoration: none; border-radius: 5px; font-size: 16px; margin-top: 30px;">V·ªÅ Trang Ch·ªß</a>
            <footer style="margin-top: 40px; color: #888888; font-size: 14px;">&copy; 2024 CookBook. T·∫•t c·∫£ c√°c quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</footer>
          </div>
        </body>
      </html>
    `;
  }
  async changePassword(userId: number, changePasswordDto: ChangePasswordDto): Promise<any> {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    const isPasswordValid = await bcrypt.compare(changePasswordDto.oldPassword, user.password);
    if (!isPasswordValid) {
      throw new UnauthorizedException('M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c.');
    }
    user.password = await bcrypt.hash(changePasswordDto.newPassword, 10);
    await this.usersRepository.save(user);
    return { message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.' };
  }
  
  async forgotPassword(forgotDto: ForgotDto): Promise<any> {
    const { email } = forgotDto;
    const user = await this.usersRepository.findOne({ where: { email } });
    if (user) {
      user.resetPasswordCode = Math.floor(100000 + Math.random() * 900000).toString();
      await this.usersRepository.save(user);

      // G·ª≠i email reset m·∫≠t kh·∫©u
      await this.mailerService.sendResetPasswordEmail(user.name, user.email, user.resetPasswordCode);
    }

    return { message: 'N·∫øu email t·ªìn t·∫°i, li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i.' };
  }
  

  async resetPasswordCode(resetPassword1Dto: ResetPassword1Dto): Promise<any> {
    const { email, code } = resetPassword1Dto;

    const user = await this.usersRepository.findOne({ where: { email: email } });
    if(user.resetPasswordCode === null){
      throw new BadRequestException('M√£ x√°c nh·∫≠n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.');
    }
    if(user.resetPasswordCode !== code){
      throw new BadRequestException('M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng.');
    }

    user.verificationToken = uuidv4();
    user.resetPasswordCode = null;
    await this.usersRepository.save(user);
    return { token: user.verificationToken, message: 'M√£ x√°c nh·∫≠n ƒë√∫ng. B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.' };
  }
  async resetPassword(resetPassword2Dto: ResetPassword2Dto): Promise<any> {
    const { email, token, password } = resetPassword2Dto;

    const user = await this.usersRepository.findOne({ where: { email: email } });
    if(user.verificationToken === null){
      throw new BadRequestException('M√£ x√°c nh·∫≠n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.');
    }
    if(user.verificationToken !== token){
      throw new BadRequestException('M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng.');
    }

    user.password = await bcrypt.hash(password, 10);
    user.verificationToken = null;
    await this.usersRepository.save(user);
    return { message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng.' };
  }
  async updateProfile(userId: number, updateProfileDto: UpdateProfileDto): Promise<any> {
    let profile = await this.usersRepository.findOne({ where: { id: userId } });
    if (!profile) {
      return { message: 'Kh√¥ng t√¨m th·∫•y profile.' };
    }
    Object.assign(profile, updateProfileDto);
    await this.usersRepository.save(profile);
    return { message: 'C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng.', profile };
  }
  async getProfileByUserId(userId: number): Promise<any> {
    const profile = await this.usersRepository.findOne({
      where: { id: userId },
      relations: ['followers', 'following'],
    });
    if (!profile) {
      throw new NotFoundException('H·ªì s∆° kh√¥ng t·ªìn t·∫°i.');
    }
    const totalFollowers = profile.followers.length;
    const totalFollowing = profile.following.length;

    const { id, bio, name, avatar, banner } = profile;
    
    return { userId: id, bio, name, avatar, banner, totalFollowers, totalFollowing };

  }
  async searchUserByUsername(username: string, page: number): Promise<any> {
    const users = await this.usersRepository.find
    ({
      where: {
        username: Like(`%${username}%`)
      }
    })
    const itemsPerPage = 10;
    const startIndex = (page - 1) * itemsPerPage;
    if (users.length > itemsPerPage*page) {
      return {nextPage: true, users: users.slice(startIndex, startIndex + itemsPerPage).map(user => new ReponseUserProfileDto(user, user.totalFollowing, user.totalFollowers))};
    }
    else{
      return {nextPage: false, users: users.slice(startIndex, startIndex + itemsPerPage).map(user => new ReponseUserProfileDto(user, user.totalFollowing, user.totalFollowers))};
    }
  }
  async searchUserByName(name: string, page: number): Promise<any> {
    const users = await this.usersRepository.find
    ({
      where: {
        name: Like(`%${name}%`)
      }
    })
    const itemsPerPage = 10;
    const startIndex = (page - 1) * itemsPerPage;
    if (users.length > itemsPerPage*page) {
      return {nextPage: true, users: users.slice(startIndex, startIndex + itemsPerPage).map(user => new ReponseUserProfileDto(user, user.totalFollowing, user.totalFollowers))};
    }
    else{
      return {nextPage: false, users: users.slice(startIndex, startIndex + itemsPerPage).map(user => new ReponseUserProfileDto(user, user.totalFollowing, user.totalFollowers))};
    }
  }
  async addToFavorites(postId: any, userId: number): Promise<any> {
    const [user, post] = await Promise.all([
      this.usersRepository.createQueryBuilder('user')
      .leftJoinAndSelect('user.favorites', 'favorites')
      .where('user.id = :userId', { userId })
      .select(['user.id', 'favorites.id'])
      .getOne(),
      
      this.postsRepository.createQueryBuilder('post')
      .where('post.id = :postId', { postId })
      .getOne()
    ]);
      
    if (!user) {
      throw new NotFoundException('User not found');
    }
    if (!post) {
      throw new NotFoundException('B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i.');
    }
    
    const favoritePostIds = user.favorites.map((fav) => fav.id);
    if (favoritePostIds.some((fav) => fav == postId)) {
      throw new BadRequestException('B√†i vi·∫øt ƒë√£ c√≥ trong danh s√°ch y√™u th√≠ch.');
    }
    
    user.favorites.push(post);
    this.usersRepository.save(user);
    return { message: 'ƒê√£ th√™m b√†i vi·∫øt v√†o danh s√°ch y√™u th√≠ch.'};
  
  }

  async deleteFromFavorites(postId: number, userId: number): Promise<any> {
    const user = await this.usersRepository.createQueryBuilder('user')
      .leftJoinAndSelect('user.favorites', 'favorites')
      .where('user.id = :userId', { userId })
      .select(['user.id', 'favorites.id'])
      .getOne();
    if (!user) {
      throw new NotFoundException('User not found');
    }
    
    const favoriteIndex = user.favorites.findIndex((fav) => fav.id == postId);

    if (favoriteIndex == -1) {
      throw new NotFoundException('B√†i vi·∫øt kh√¥ng n·∫±m trong danh s√°ch y√™u th√≠ch c·ªßa b·∫°n.');
    }
    user.favorites.splice(favoriteIndex, 1);

    this.usersRepository.save(user);
    return { message: 'ƒê√£ x√≥a b√†i vi·∫øt kh·ªèi danh s√°ch y√™u th√≠ch.' };
  }

  async getFavorites(page: number, userId: number): Promise<any> {
    const user = await this.usersRepository.findOne({
      where: { id: userId },
      relations: ['favorites'],
    });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    const favorites = user.favorites;

    const itemsPerPage = 10;
    const startIndex = (page - 1) * itemsPerPage;
    if (favorites.length > itemsPerPage*page) {
      return {nextPage: true, favorites: favorites.slice(startIndex, startIndex + itemsPerPage).map(fav => new LiteReponsePostDto(fav))};
    }
    else{
      return {nextPage: false, favorites: favorites.slice(startIndex, startIndex + itemsPerPage).map(fav => new LiteReponsePostDto(fav))};
    }
  }
  async checkFavorite(postId: number, userId: number): Promise<any> {
    const user = await this.usersRepository.createQueryBuilder('user')
      .leftJoinAndSelect('user.favorites', 'favorites')
      .where('user.id = :userId', { userId })
      .select(['user.id', 'favorites.id'])
      .getOne();
    if (!user) {
      throw new NotFoundException('User not found');
    }
    const favoritePostIds = user.favorites.map((fav) => fav.id);
    if (favoritePostIds.some((fav) => fav == postId)) {
      return { isFavorited: true };
    }
    return { isFavorited: false };

  }
  async setTokenFCM(tokenDto: TokenDto, userId: number): Promise<any> {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    user.tokenFCM = tokenDto.token;
    await this.usersRepository.save(user);
    return { message: 'ƒê√£ c·∫≠p nh·∫≠t tokenFCM.' };
  }
  async logout(userId: number): Promise<any> {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    user.tokenFCM = null;
    await this.usersRepository.save(user);
    return { message: 'ƒê√£ ƒëƒÉng xu·∫•t.' };
  }
  /*
  async uploadImage(file: Express.Multer.File): Promise<any> {
    try {
      if(!file) return {error: "No file uploaded"}
      const result = await cloudinary.uploader.upload(file.path, {
        folder: 'uploads',
      });
      console.log(result.secure_url);
      return result.secure_url;

    } catch (error) {
      console.log(error);
      throw new InternalServerErrorException('Failed to upload image');
    }
  }
    */
  async uploadImage(buffer: Buffer): Promise<any> {
    try {
      return new Promise((resolve, reject) => {
        const readable = new Readable();
        readable.push(buffer);
        readable.push(null);
        
        const uploadStream = cloudinary.uploader.upload_stream(
          { folder: 'uploads' },
          (error, result) => {
            if (error) {
              reject(new InternalServerErrorException('Failed to upload image to Cloudinary'));
            }
            console.log({imageURL: result.secure_url})
            resolve(
              {imageURL: result.secure_url}
            );
          }
        );

        readable.pipe(uploadStream);
      });

    } catch (error) {
      throw new InternalServerErrorException('Failed to upload image');
    }
  }
  async sendImageToAI(buffer: Buffer): Promise<any> {
    try{
      const { GoogleGenerativeAI } = require("@google/generative-ai");
      
      const genAI = new GoogleGenerativeAI("AIzaSyBEEXfHU_NM0mQUIrqitWBcc-JzIR-3ccw");
      function fileToGenerativePart(buf, mimeType) {
        return {
          inlineData: {
            data: buf.toString("base64"),
            mimeType
          },
        };
      }
      const imageParts = [
        fileToGenerativePart(buffer, "image/jpeg")
      ]
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      const generationConfig = {
        temperature: 0.1,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 8192,
        responseMimeType: "application/json",
        responseSchema: {
          type: "object",
          description: "Danh s√°ch nguy√™n li·ªáu ph√¢n t√≠ch ƒë∆∞·ª£c t·ª´ trong ·∫£nh v√† t√™n c√°c m√≥n ƒÉn ch·∫ø bi·∫øn ƒë∆∞·ª£c ch·ªâ v·ªõi nh·ªØng nguy√™n li·ªáu ƒë√≥",
          properties: {
            ingredients: {
              type: "array",
              description: "Danh s√°ch nguy√™n li·ªáu ph√¢n t√≠ch ƒë∆∞·ª£c t·ª´ trong ·∫£nh",
              items: {
                type: "object",
                description: "Nguy√™n li·ªáu ph√¢n t√≠ch ƒë∆∞·ª£c t·ª´ trong ·∫£nh",
                properties: {
                  name: {
                    type: "string",
                    description: "T√™n nguy√™n li·ªáu"
                  },
                  quantity: {
                    type: "string",
                    description: "S·ªë l∆∞·ª£ng nguy√™n li·ªáu"
                  }
                },
                required: [
                  "name",
                  "quantity"
                ]
              }
            },
            recipes: {
              type: "array",
              description: "Danh s√°ch m√≥n ƒÉn ch·∫ø bi·∫øn ƒë∆∞·ª£c ch·ªâ v·ªõi nh·ªØng nguy√™n li·ªáu c√≥ s·∫µn, kh√¥ng c·∫ßn chu·∫©n b·ªã th√™m",
              items: {
                type: "string",
                description: "T√™n m√≥n ƒÉn"
              }
            }
          },
          required: [
            "ingredients",
            "recipes"
          ]
        },
      };
      const chatSession = model.startChat({
        generationConfig,
        history: [
        ],
      });
      const prompt = 
`
B·∫°n l√† tr·ª£ l√Ω AI chuy√™n ph√¢n t√≠ch nguy√™n li·ªáu v√† n·∫•u ƒÉn. T√¥i s·∫Ω g·ª≠i cho b·∫°n m·ªôt h√¨nh ·∫£nh l√† c√°c nguy√™n li·ªáu n·∫•u ƒÉn, t√¥i c·∫ßn b·∫°n ph√¢n t√≠ch h√¨nh ·∫£nh ƒë√≥ v√† t√¨m nh·ªØng m√≥n ƒÉn n·∫•u ƒë∆∞·ª£c ngay t·ª´ nh·ªØng nguy√™n li·ªáu ƒë√≥ m√† kh√¥ng c·∫ßn mua th√™m. Khi nh·∫≠n h√¨nh ·∫£nh nguy√™n li·ªáu, b·∫°n ph·∫£i ph√¢n t√≠ch v√† li·ªát k√™ ch√≠nh x√°c c√°c nguy√™n li·ªáu c√≥ trong ·∫£nh (bao g·ªìm s·ªë l∆∞·ª£ng c·ª• th·ªÉ nh∆∞ "1kg", "2 th√¨a canh", "3 qu·∫£").
Sau ƒë√≥ h√£y t·∫°o ra 3-6 m√≥n ƒÉn n·∫•u ƒë∆∞·ª£c lu√¥n v·ªõi nh·ªØng nguy√™n li·ªáu ƒë√£ c√≥, kh√¥ng c·∫ßn chu·∫©n b·ªã th√™m, ch·ªâ d√πng nh·ªØng nguy√™n li·ªáu ƒë√£ c√≥ ƒë·ªÉ t·∫°o m√≥n ƒÉn, kh√¥ng t·∫°o nh·ªØng m√≥n ƒÉn m√† thi·∫øu nguy√™n li·ªá.
M·ªói m√≥n ƒÉn t·∫°o ra ph·∫£i th·∫≠t h·ª£p l√Ω, th·ª±c t·∫ø, ƒÉn ƒë∆∞·ª£c. Ch·ªâ d√πng nh·ªØng nguy√™n li·ªáu ƒë√£ c√≥ ƒë·ªÉ t·∫°o m√≥n ƒÉn, kh√¥ng t·∫°o nh·ªØng m√≥n ƒÉn m√† thi·∫øu nguy√™n li·ªáu.
K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† ti·∫øng vi·ªát.
`
      
      //const result = await model.generateContent([prompt, ...imageParts]);
      const result = await chatSession.sendMessage([prompt, ...imageParts]);

      const data = result.response.text();
      const parsedData = JSON.parse(data);
      return parsedData;
    } catch (error) {
      console.log(error);
      throw new Error('Failed to analyze image');
    }

  }
  async getRecipesByIngredients(getRecipeDto: GetRecipeDto ): Promise<any> {
    try{
      const { GoogleGenerativeAI } = require("@google/generative-ai");
      
      const genAI = new GoogleGenerativeAI("AIzaSyBEEXfHU_NM0mQUIrqitWBcc-JzIR-3ccw");
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      const generationConfig = {
        temperature: 1,
        topP: 0.5,
        topK: 40,
        maxOutputTokens: 8192,
        responseMimeType: "application/json",
        responseSchema: {
          type: "object",
          properties: {
            recipes: {
              type: "array",
              description: "Danh s√°ch c√¥ng th·ª©c n·∫•u ƒÉn",
              items: {
                type: "object",
                description: "C√¥ng th·ª©c n·∫•u ƒÉn",
                properties: {
                  name: {
                    type: "string",
                    description: "T√™n m√≥n ƒÉn, ph·∫£i th·∫≠t l√©m l·ªânh, h√†i h∆∞·ªõc, th√∫ v·ªã"
                  },
                  ingredients: {
                    type: "array",
                    description: "Danh s√°ch nguy√™n li·ªáu, s·ªë l∆∞·ª£ng nguy√™n li·ªáu c·∫ßn ch·∫ø bi·∫øn m√≥n ƒÉn",
                    items: {
                      type: "object",
                      properties: {
                        name: {
                          type: "string",
                          description: "T√™n nguy√™n li·ªáu"
                        },
                        quantity: {
                          type: "string",
                          description: "S·ªë l∆∞·ª£ng nguy√™n li·ªáu"
                        }
                      },
                      required: [
                        "name",
                        "quantity"
                      ]
                    }
                  },
                  steps: {
                    type: "array",
                    description: "Danh s√°ch c√°c b∆∞·ªõc n·∫•u ƒÉn, h∆∞·ªõng d·∫´n c√°ch ch·∫ø bi·∫øn m√≥n ƒÉn",
                    items: {
                      type: "string",
                      description: "B∆∞·ªõc n·∫•u ƒÉn, ph·∫£i th·∫≠t l√©m l·ªânh, h√†i h∆∞·ªõc, th√∫ v·ªã"
                    }
                  }
                },
                required: [
                  "name",
                  "ingredients",
                  "steps"
                ]
              }
            }
          },
          required: [
            "recipes"
          ]
        },
      };
      
      const chatSession = model.startChat({
        generationConfig,
        history: [
        ],
      });
      let prompt: any;
      prompt =
`
Nh·∫≠p vai th√†nh m·ªôt ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp, h√£y gi√∫p t√¥i x√¢y d·ª±ng c√°c c√¥ng th·ª©c n·∫•u ƒÉn ch·ªâ v·ªõi nh·ªØng nguy√™n li·ªáu c·ªßa t√¥i, kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng th√™m nguy√™n li·ªáu n√†o kh√°c.
C√°c m√≥n ƒÉn ph·∫£i th·ª±c t·∫ø, c√≥ th·∫≠t, ƒÉn ƒë∆∞·ª£c.
D∆∞·ªõi ƒë√¢y l√† danh s√°ch nguy√™n li·ªáu c·ªßa t√¥i:
${JSON.stringify(getRecipeDto, null, 2)}
Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh·ªØng nguy√™n li·ªáu tr√™n, t·∫°o cho t√¥i nh·ªØng nguy√™n li·ªáu v√† c√°c b∆∞·ªõc ƒë·ªÉ n·∫•u c√°c m√≥n ƒÉn th·∫≠t ngon t·ª´ nh·ªØng nguy√™n li·ªáu ƒë√≥.
C√°c b∆∞·ªõc n·∫•u ƒÉn ph·∫£i ƒë·ªß: s∆° ch·∫ø nguy√™n li·ªáu, ch·∫ø bi·∫øn m√≥n ƒÉn, tr√¨nh b√†y m√≥n ƒÉn.
C√°c b∆∞·ªõc h∆∞·ªõng d·∫´n ph·∫£i th·∫≠t h√†i h∆∞·ªõc, th√∫ v·ªã, l√©m l·ªânh, b·∫Øt ch∆∞·ªõc c√°ch n√≥i chuy·ªán h√†i h∆∞·ªõc c·ªßa gi·ªõi tr·∫ª, b·∫Øt ch∆∞·ªõc c√°ch s·ª≠ d·ª•ng nh·ªØng t·ª´ ng·ªØ trending, nh·ªØng t·ª´ gi·ªõi tr·∫ª hay d√πng. 
Pha c√°c tr√≤ ƒë√πa, c√¢u chuy·ªán, t√¨nh hu·ªëng h√†i h∆∞·ªõc v√†o b∆∞·ªõc ch·∫ø bi·∫øn m√≥n ƒÉn.
C√≥ th·ªÉ ·∫©n d·ª• tr√™u ƒë√πa (n·ªôi dung ng∆∞·ªùi l·ªõn nh∆∞ng t·∫ø nh·ªã).
`;

      if(getRecipeDto.recipes){
prompt = 
`
Nh·∫≠p vai th√†nh m·ªôt ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp, h√£y gi√∫p t√¥i x√¢y d·ª±ng c√°c c√¥ng th·ª©c n·∫•u ƒÉn ch·ªâ v·ªõi nh·ªØng nguy√™n li·ªáu c·ªßa t√¥i, kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng th√™m nguy√™n li·ªáu n√†o kh√°c.
C√°c m√≥n ƒÉn ph·∫£i th·ª±c t·∫ø, c√≥ th·∫≠t, ƒÉn ƒë∆∞·ª£c.
D∆∞·ªõi ƒë√¢y l√† danh s√°ch nguy√™n li·ªáu c·ªßa t√¥i:
${JSON.stringify(getRecipeDto, null, 2)}
Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh·ªØng nguy√™n li·ªáu tr√™n, t·∫°o cho t√¥i nh·ªØng nguy√™n li·ªáu v√† c√°c b∆∞·ªõc ƒë·ªÉ n·∫•u t·ª´ng m√≥n ƒÉn sau:
${JSON.stringify(getRecipeDto.recipes, null, 2)}
C√°c b∆∞·ªõc n·∫•u ƒÉn ph·∫£i ƒë·ªß: s∆° ch·∫ø nguy√™n li·ªáu, ch·∫ø bi·∫øn m√≥n ƒÉn, tr√¨nh b√†y m√≥n ƒÉn.
C√°c b∆∞·ªõc h∆∞·ªõng d·∫´n ph·∫£i th·∫≠t h√†i h∆∞·ªõc, th√∫ v·ªã, l√©m l·ªânh, b·∫Øt ch∆∞·ªõc c√°ch n√≥i chuy·ªán h√†i h∆∞·ªõc c·ªßa gi·ªõi tr·∫ª, b·∫Øt ch∆∞·ªõc c√°ch s·ª≠ d·ª•ng nh·ªØng t·ª´ ng·ªØ trending, nh·ªØng t·ª´ gi·ªõi tr·∫ª hay d√πng. 
Pha c√°c tr√≤ ƒë√πa, c√¢u chuy·ªán, t√¨nh hu·ªëng h√†i h∆∞·ªõc v√†o b∆∞·ªõc ch·∫ø bi·∫øn m√≥n ƒÉn.
C√≥ th·ªÉ ·∫©n d·ª• tr√™u ƒë√πa (n·ªôi dung ng∆∞·ªùi l·ªõn nh∆∞ng t·∫ø nh·ªã).
`
      }
      let result: any;
      if(getRecipeDto.note){
        const note = 
`
Ghi ch√∫ cho m√≥n ƒÉn:
${JSON.stringify(getRecipeDto.note, null, 2)}
`
        result = await chatSession.sendMessage([prompt,...note]);
      }
      else 
      {
        result = await chatSession.sendMessage(prompt);
      }
      console.log('ok2');
      const data = result.response.text();
      const parsedData = JSON.parse(data);
      return parsedData;
    } catch (error) {
      console.log(error);
      throw new Error('Failed get recipes by ingredients');
    }
  }
}

