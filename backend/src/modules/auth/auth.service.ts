// src/modules/auth/auth.service.ts
import { Injectable, BadRequestException, UnauthorizedException, NotFoundException, InternalServerErrorException } from '@nestjs/common';
import { RegisterDto } from './dtos/register.dto';
import { LoginDto, TokenDto } from './dtos/login.dto';
import { ForgotDto } from './dtos/forgot.dto';
import { ResetPassword1Dto, ResetPassword2Dto } from './dtos/reset-password.dto';
import { InjectRepository } from '@nestjs/typeorm';
import { User } from './entities/user.entity';
import { Like, Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { JwtService } from '@nestjs/jwt';
import { MailerService } from '../mailer/mailer.service';
import { v4 as uuidv4 } from 'uuid';
import { UpdateProfileDto } from './dtos/update-profile.dto';
import { Post } from '../posts/entities/post.entity';
import { FullReponsePostDto, LiteReponsePostDto, ReponseUserDto, ReponseUserProfileDto } from '../posts/dtos/create-post.dto';
import { ChangePasswordDto } from './dtos/change-password.dto';
import { v2 as cloudinary } from 'cloudinary';
import { Readable } from 'stream';
import * as fileType from 'file-type';
import { randomInt } from 'crypto';
import { GetRecipeDto } from './dtos/aichef.dto';
import axios from 'axios'; // Import axios
import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold, SchemaType, Part  } from "@google/generative-ai"; // Import necessary types
interface PostAnalysisSchema {
  overview: string; // General overview of the post and image
  isEnglishRelated: boolean; // Flag indicating if the post is about English learning
  englishKnowledge?: { // Optional: Only if isEnglishRelated is true
    topic: string; // Main topic (e.g., "Passive Voice", "Present Perfect")
    details: string[]; // Detailed explanation, grammar rules, formulas
    examples: string[]; // Example sentences
  }[];
  learningTips?: string[]; // Optional: Only if isEnglishRelated is true
  wittyAnalysis?: string; // Optional: Only if isEnglishRelated is false
}
interface ExerciseSchema {
  analysisSummary: string; // Brief summary of the English concepts found (or why none were found)
  isEnglishRelated: boolean; // Whether the post is related to English learning
  exercises: {
    question: string; // The multiple-choice question
    options: {
      A: string;
      B: string;
      C: string;
      D: string;
    };
    correctAnswer: 'A' | 'B' | 'C' | 'D'; // The correct option key
    explanation: string; // Brief explanation why the answer is correct, referencing the post content if possible
  }[];
}

@Injectable()
export class AuthService {
  [x: string]: any;
  constructor(
    @InjectRepository(User) private usersRepository: Repository<User>,
    @InjectRepository(Post) private postsRepository: Repository<Post>,
    private jwtService: JwtService,
    private mailerService: MailerService,
  ) {
    cloudinary.config({
      cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
      api_key: process.env.CLOUDINARY_API_KEY,
      api_secret: process.env.CLOUDINARY_API_SECRET,
    })
  }
  async getUserIdFromToKen(token: string): Promise<number> {
    const payload = this.jwtService.decode(token);
    return payload['sub'];
  }
  async register(registerDto: RegisterDto, baseUrl: string): Promise<any> {
    
    try {
      let { username, email, password, name } = registerDto;
      if(name === null || name === undefined){
        name = "Ham ƒÉn " + randomInt(10000, 99999);
      }
      const existingUser = await this.usersRepository.findOne({ where: [{ email }, { username }] });

      if (existingUser?.isActive) {
        throw new BadRequestException('Email ho·∫∑c t√™n ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.');
      }
      if(existingUser){
        await this.usersRepository.delete(existingUser.id);
      }
      const hashedPassword = await bcrypt.hash(password, 10);


      const user = this.usersRepository.create({
        username,
        email,
        name,
        password: hashedPassword,
        isActive: false,
        verificationToken: uuidv4(),
      });

      await this.usersRepository.save(user);
      const url = `${baseUrl}/auth/verify-email?token=${user.verificationToken}`;
      await this.mailerService.sendVerificationEmail(user.username, user.email, user.verificationToken, baseUrl);

      return { message: 'ƒêƒÉng k√Ω th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c.'};
    } 
    catch (error) {
      if (error instanceof BadRequestException) {
      throw error;
      }
      console.log(error);
      throw new BadRequestException('C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng k√Ω.');
    }
  }

  async login(loginDto: LoginDto): Promise<any> {
    const { username, password, tokenFCM } = loginDto;
    const user = await this.usersRepository.findOne({ where: { username } });

    if (!user) {
      throw new UnauthorizedException('Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.');
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      throw new UnauthorizedException('Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.');
    }

    if (!user.isActive) {
      throw new UnauthorizedException('T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c.');
    }

    const payload = { sub: user.id, username: user.username, roles: user.roles };
    const token = this.jwtService.sign(payload);

    if(tokenFCM !== null && tokenFCM !== undefined){
      user.tokenFCM = tokenFCM;
      await this.usersRepository.save(user);
    }
    return { access_token: token, message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng', user: new ReponseUserDto(user) };
  }

  async verifyEmail(token: string): Promise<string> {
    const user = await this.usersRepository.findOne({ where: { verificationToken: token } });
    
    if (!user) {
      return `
        <!DOCTYPE html>
        <html lang="vi">
          <head>
            <meta charset="UTF-8">
            <title>X√°c Th·ª±c Email - L·ªói</title>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
          </head>
          <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f0f2f5; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh;">
            <div style="max-width: 600px; background-color: #ffffff; padding: 40px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); text-align: center;">
              <div style="font-size: 50px; color: #e74c3c; margin-bottom: 20px;">‚ùå</div>
              <h1 style="color: #333333; margin-bottom: 20px;">X√°c Th·ª±c Email Th·∫•t B·∫°i</h1>
              <p style="color: #555555; font-size: 16px; line-height: 1.6;">
                Li√™n k·∫øt x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu g·ª≠i l·∫°i email x√°c th·ª±c ho·∫∑c li√™n h·ªá h·ªó tr·ª£.
              </p>
              <footer style="margin-top: 40px; color: #888888; font-size: 14px;">&copy; 2024 EngNet. T·∫•t c·∫£ c√°c quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</footer>
            </div>
          </body>
        </html>
      `;
    }
  
    user.isActive = true;
    user.verificationToken = null;
    await this.usersRepository.save(user);
  
    return `
      <!DOCTYPE html>
      <html lang="vi">
        <head>
          <meta charset="UTF-8">
          <title>X√°c Th·ª±c Email Th√†nh C√¥ng</title>
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
        </head>
        <body style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #f0f2f5; margin: 0; padding: 0; display: flex; justify-content: center; align-items: center; height: 100vh;">
          <div style="max-width: 600px; background-color: #ffffff; padding: 40px; border-radius: 10px; box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); text-align: center;">
            <div style="font-size: 50px; color: #28a745; margin-bottom: 20px;">‚úÖ</div>
            <h1 style="color: #333333; margin-bottom: 20px;">üéâ Email X√°c Th·ª±c Th√†nh C√¥ng!</h1>
            <p style="color: #555555; font-size: 16px; line-height: 1.6;">
              <strong>Username:</strong> ${user.username}<br>
              <strong>Email:</strong> ${user.email}
            </p>
            <p style="color: #555555; font-size: 16px; line-height: 1.6;">
              C·∫£m ∆°n b·∫°n ƒë√£ x√°c th·ª±c email c·ªßa m√¨nh. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ truy c·∫≠p ƒë·∫ßy ƒë·ªß c√°c t√≠nh nƒÉng c·ªßa EngNet v√† b·∫Øt ƒë·∫ßu kh√°m ph√° nh·ªØng c√¥ng th·ª©c n·∫•u ƒÉn tuy·ªát v·ªùi!
            </p>
            <a href="https://www.EngNet.com" style="display: inline-block; padding: 12px 24px; background-color: #28a745; color: #ffffff; text-decoration: none; border-radius: 5px; font-size: 16px; margin-top: 30px;">V·ªÅ Trang Ch·ªß</a>
            <footer style="margin-top: 40px; color: #888888; font-size: 14px;">&copy; 2024 EngNet. T·∫•t c·∫£ c√°c quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.</footer>
          </div>
        </body>
      </html>
    `;
  }
  async changePassword(userId: number, changePasswordDto: ChangePasswordDto): Promise<any> {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    const isPasswordValid = await bcrypt.compare(changePasswordDto.oldPassword, user.password);
    if (!isPasswordValid) {
      throw new UnauthorizedException('M·∫≠t kh·∫©u c≈© kh√¥ng ch√≠nh x√°c.');
    }
    user.password = await bcrypt.hash(changePasswordDto.newPassword, 10);
    await this.usersRepository.save(user);
    return { message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.' };
  }
  
  async forgotPassword(forgotDto: ForgotDto): Promise<any> {
    const { email } = forgotDto;
    const user = await this.usersRepository.findOne({ where: { email } });
    if (user) {
      user.resetPasswordCode = Math.floor(100000 + Math.random() * 900000).toString();
      await this.usersRepository.save(user);

      // G·ª≠i email reset m·∫≠t kh·∫©u
      await this.mailerService.sendResetPasswordEmail(user.name, user.email, user.resetPasswordCode);
    }

    return { message: 'N·∫øu email t·ªìn t·∫°i, li√™n k·∫øt ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i.' };
  }
  

  async resetPasswordCode(resetPassword1Dto: ResetPassword1Dto): Promise<any> {
    const { email, code } = resetPassword1Dto;

    const user = await this.usersRepository.findOne({ where: { email: email } });
    if(user.resetPasswordCode === null){
      throw new BadRequestException('M√£ x√°c nh·∫≠n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.');
    }
    if(user.resetPasswordCode !== code){
      throw new BadRequestException('M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng.');
    }

    user.verificationToken = uuidv4();
    user.resetPasswordCode = null;
    await this.usersRepository.save(user);
    return { token: user.verificationToken, message: 'M√£ x√°c nh·∫≠n ƒë√∫ng. B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u.' };
  }
  async resetPassword(resetPassword2Dto: ResetPassword2Dto): Promise<any> {
    const { email, token, password } = resetPassword2Dto;

    const user = await this.usersRepository.findOne({ where: { email: email } });
    if(user.verificationToken === null){
      throw new BadRequestException('M√£ x√°c nh·∫≠n ƒë√£ h·∫øt h·∫°n. Vui l√≤ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u m·ªõi.');
    }
    if(user.verificationToken !== token){
      throw new BadRequestException('M√£ x√°c nh·∫≠n kh√¥ng ƒë√∫ng.');
    }

    user.password = await bcrypt.hash(password, 10);
    user.verificationToken = null;
    await this.usersRepository.save(user);
    return { message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng.' };
  }
  async updateProfile(userId: number, updateProfileDto: UpdateProfileDto): Promise<any> {
    let profile = await this.usersRepository.findOne({ where: { id: userId } });
    if (!profile) {
      return { message: 'Kh√¥ng t√¨m th·∫•y profile.' };
    }
    Object.assign(profile, updateProfileDto);
    await this.usersRepository.save(profile);
    return { message: 'C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng.', profile };
  }
  async getProfileByUserId(userId: number): Promise<any> {
    const profile = await this.usersRepository.findOne({
      where: { id: userId },
      relations: ['followers', 'following'],
    });
    if (!profile) {
      throw new NotFoundException('H·ªì s∆° kh√¥ng t·ªìn t·∫°i.');
    }
    const totalFollowers = profile.followers.length;
    const totalFollowing = profile.following.length;

    const { id, bio, name, avatar, banner } = profile;
    
    return { userId: id, bio, name, avatar, banner, totalFollowers, totalFollowing };

  }
  async searchUserByUsername(username: string, page: number): Promise<any> {
    const users = await this.usersRepository.find
    ({
      where: {
        username: Like(`%${username}%`)
      }
    })
    const itemsPerPage = 10;
    const startIndex = (page - 1) * itemsPerPage;
    if (users.length > itemsPerPage*page) {
      return {nextPage: true, users: users.slice(startIndex, startIndex + itemsPerPage).map(user => new ReponseUserProfileDto(user, user.totalFollowing, user.totalFollowers))};
    }
    else{
      return {nextPage: false, users: users.slice(startIndex, startIndex + itemsPerPage).map(user => new ReponseUserProfileDto(user, user.totalFollowing, user.totalFollowers))};
    }
  }
  async searchUserByName(name: string, page: number): Promise<any> {
    const users = await this.usersRepository.find
    ({
      where: {
        name: Like(`%${name}%`)
      }
    })
    const itemsPerPage = 10;
    const startIndex = (page - 1) * itemsPerPage;
    if (users.length > itemsPerPage*page) {
      return {nextPage: true, users: users.slice(startIndex, startIndex + itemsPerPage).map(user => new ReponseUserProfileDto(user, user.totalFollowing, user.totalFollowers))};
    }
    else{
      return {nextPage: false, users: users.slice(startIndex, startIndex + itemsPerPage).map(user => new ReponseUserProfileDto(user, user.totalFollowing, user.totalFollowers))};
    }
  }
  async addToFavorites(postId: any, userId: number): Promise<any> {
    const [user, post] = await Promise.all([
      this.usersRepository.createQueryBuilder('user')
      .leftJoinAndSelect('user.favorites', 'favorites')
      .where('user.id = :userId', { userId })
      .select(['user.id', 'favorites.id'])
      .getOne(),
      
      this.postsRepository.createQueryBuilder('post')
      .where('post.id = :postId', { postId })
      .getOne()
    ]);
      
    if (!user) {
      throw new NotFoundException('User not found');
    }
    if (!post) {
      throw new NotFoundException('B√†i vi·∫øt kh√¥ng t·ªìn t·∫°i.');
    }
    
    const favoritePostIds = user.favorites.map((fav) => fav.id);
    if (favoritePostIds.some((fav) => fav == postId)) {
      throw new BadRequestException('B√†i vi·∫øt ƒë√£ c√≥ trong danh s√°ch y√™u th√≠ch.');
    }
    
    user.favorites.push(post);
    this.usersRepository.save(user);
    return { message: 'ƒê√£ th√™m b√†i vi·∫øt v√†o danh s√°ch y√™u th√≠ch.'};
  
  }

  async deleteFromFavorites(postId: number, userId: number): Promise<any> {
    const user = await this.usersRepository.createQueryBuilder('user')
      .leftJoinAndSelect('user.favorites', 'favorites')
      .where('user.id = :userId', { userId })
      .select(['user.id', 'favorites.id'])
      .getOne();
    if (!user) {
      throw new NotFoundException('User not found');
    }
    
    const favoriteIndex = user.favorites.findIndex((fav) => fav.id == postId);

    if (favoriteIndex == -1) {
      throw new NotFoundException('B√†i vi·∫øt kh√¥ng n·∫±m trong danh s√°ch y√™u th√≠ch c·ªßa b·∫°n.');
    }
    user.favorites.splice(favoriteIndex, 1);

    this.usersRepository.save(user);
    return { message: 'ƒê√£ x√≥a b√†i vi·∫øt kh·ªèi danh s√°ch y√™u th√≠ch.' };
  }

  async getFavorites(page: number, userId: number): Promise<any> {
    const user = await this.usersRepository.findOne({
      where: { id: userId },
      relations: ['favorites'],
    });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    const favorites = user.favorites;

    const itemsPerPage = 10;
    const startIndex = (page - 1) * itemsPerPage;
    if (favorites.length > itemsPerPage*page) {
      return {nextPage: true, favorites: favorites.slice(startIndex, startIndex + itemsPerPage).map(fav => new LiteReponsePostDto(fav))};
    }
    else{
      return {nextPage: false, favorites: favorites.slice(startIndex, startIndex + itemsPerPage).map(fav => new LiteReponsePostDto(fav))};
    }
  }
  async checkFavorite(postId: number, userId: number): Promise<any> {
    const user = await this.usersRepository.createQueryBuilder('user')
      .leftJoinAndSelect('user.favorites', 'favorites')
      .where('user.id = :userId', { userId })
      .select(['user.id', 'favorites.id'])
      .getOne();
    if (!user) {
      throw new NotFoundException('User not found');
    }
    const favoritePostIds = user.favorites.map((fav) => fav.id);
    if (favoritePostIds.some((fav) => fav == postId)) {
      return { isFavorited: true };
    }
    return { isFavorited: false };

  }
  async setTokenFCM(tokenDto: TokenDto, userId: number): Promise<any> {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    user.tokenFCM = tokenDto.token;
    await this.usersRepository.save(user);
    return { message: 'ƒê√£ c·∫≠p nh·∫≠t tokenFCM.' };
  }
  async logout(userId: number): Promise<any> {
    const user = await this.usersRepository.findOne({ where: { id: userId } });
    if (!user) {
      throw new NotFoundException('User not found');
    }
    user.tokenFCM = null;
    await this.usersRepository.save(user);
    return { message: 'ƒê√£ ƒëƒÉng xu·∫•t.' };
  }
  /*
  async uploadImage(file: Express.Multer.File): Promise<any> {
    try {
      if(!file) return {error: "No file uploaded"}
      const result = await cloudinary.uploader.upload(file.path, {
        folder: 'uploads',
      });
      console.log(result.secure_url);
      return result.secure_url;

    } catch (error) {
      console.log(error);
      throw new InternalServerErrorException('Failed to upload image');
    }
  }
    */
  async uploadImage(buffer: Buffer): Promise<any> {
    try {
      return new Promise((resolve, reject) => {
        const readable = new Readable();
        readable.push(buffer);
        readable.push(null);
        
        const uploadStream = cloudinary.uploader.upload_stream(
          { folder: 'uploads' },
          (error, result) => {
            if (error) {
              reject(new InternalServerErrorException('Failed to upload image to Cloudinary'));
            }
            console.log({imageURL: result.secure_url})
            resolve(
              {imageURL: result.secure_url}
            );
          }
        );

        readable.pipe(uploadStream);
      });

    } catch (error) {
      throw new InternalServerErrorException('Failed to upload image');
    }
  }
  // #############################
  async urlToGenerativePart(url: string, mimeType: string): Promise<{ inlineData: { data: string; mimeType: string } }> {
    try {
      const response = await axios.get<ArrayBuffer>(url, { responseType: 'arraybuffer' });
      const buffer = Buffer.from(response.data); // 'binary' encoding is deprecated for ArrayBuffer
      return {
        inlineData: {
          data: buffer.toString('base64'),
          mimeType,
        },
      };
    } catch (error) {
      console.error("Error fetching image from URL:", url, error);
      throw new InternalServerErrorException('Failed to fetch image for analysis');
    }
  }

  async CreateExFromPost(postId: number, level: number): Promise<any> {
    try {
      const postData = await this.postsRepository.findOne({
        where: { id: postId },
        // No need to load author for this specific task
      });

      if (!postData) {
        throw new NotFoundException('Post not found');
      }

      // Map level (1-6) to CEFR levels (A1-C2)
      const cefrLevels = ['A1', 'A2', 'B1', 'B2', 'C1', 'C2'];
      const targetLevel = cefrLevels[level - 1] || 'B1'; // Default to B1 if level is invalid

      // It's highly recommended to store API keys in environment variables
      const API_KEY = process.env.GEMINI_API_KEY || "AIzaSyCpO5z7jxHYM6JDa6eSQs8lx4atAjPWgVw"; // Use the provided key
      const MODEL_NAME = "gemini-2.0-flash"; // Model supporting image and JSON output

      const genAI = new GoogleGenerativeAI(API_KEY);

      // Define the desired JSON output structure for Gemini
      const exerciseResponseSchema = {
        type: SchemaType.OBJECT,
        properties: {
          analysisSummary: {
            type: SchemaType.STRING,
            description: `T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ c√°c kh√°i ni·ªám ti·∫øng Anh ƒë∆∞·ª£c t√¨m th·∫•y trong b√†i vi·∫øt v√† h√¨nh ·∫£nh, ho·∫∑c gi·∫£i th√≠ch t·∫°i sao kh√¥ng th·ªÉ t·∫°o b√†i t·∫≠p (v√≠ d·ª•: n·ªôi dung kh√¥ng li√™n quan). Ng√¥n ng·ªØ: Ti·∫øng Vi·ªát.`,
          },
          isEnglishRelated: {
            type: SchemaType.BOOLEAN,
            description: "X√°c ƒë·ªãnh b√†i vi·∫øt c√≥ li√™n quan tr·ª±c ti·∫øp ƒë·∫øn vi·ªác h·ªçc ti·∫øng Anh hay kh√¥ng.",
          },
          exercises: {
            type: SchemaType.ARRAY,
            description: `Danh s√°ch c√°c c√¢u h·ªèi tr·∫Øc nghi·ªám (A, B, C, D) d·ª±a tr√™n n·ªôi dung ti·∫øng Anh trong b√†i vi·∫øt v√† h√¨nh ·∫£nh, ph√π h·ª£p v·ªõi tr√¨nh ƒë·ªô ${targetLevel}. Ng√¥n ng·ªØ: Ti·∫øng Anh cho c√¢u h·ªèi v√† l·ª±a ch·ªçn, Ti·∫øng Vi·ªát cho gi·∫£i th√≠ch.`,
            items: {
              type: SchemaType.OBJECT,
              properties: {
                question: {
                  type: SchemaType.STRING,
                  description: "C√¢u h·ªèi tr·∫Øc nghi·ªám b·∫±ng ti·∫øng Vi·ªát, r√µ r√†ng, ng·∫Øn g·ªçn.",
                },
                options: {
                  type: SchemaType.OBJECT,
                  properties: {
                    A: { type: SchemaType.STRING, description: "L·ª±a ch·ªçn A (Ti·∫øng Anh)" },
                    B: { type: SchemaType.STRING, description: "L·ª±a ch·ªçn B (Ti·∫øng Anh)" },
                    C: { type: SchemaType.STRING, description: "L·ª±a ch·ªçn C (Ti·∫øng Anh)" },
                    D: { type: SchemaType.STRING, description: "L·ª±a ch·ªçn D (Ti·∫øng Anh)" },
                  },
                  required: ["A", "B", "C", "D"],
                },
                correctAnswer: {
                  type: SchemaType.STRING,
                  enum: ["A", "B", "C", "D"],
                  description: "Ch·ªØ c√°i (A, B, C, ho·∫∑c D) c·ªßa ƒë√°p √°n ƒë√∫ng.",
                },
                explanation: {
                    type: SchemaType.STRING,
                    description: "Gi·∫£i th√≠ch b·∫±ng ti·∫øng Vi·ªát t·∫°i sao ƒë√°p √°n ƒë√≥ ƒë√∫ng, t·∫°i sao t·ª´ng ƒë√°p √°n kh√°c sai",
                }
              },
              required: ["question", "options", "correctAnswer", "explanation"],
            },
          },
        },
        required: ["analysisSummary", "exercises", "isEnglishRelated"],
      };


      const model = genAI.getGenerativeModel({
        model: MODEL_NAME,
        safetySettings: [ // Standard safety settings
           { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
           { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
           { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
           { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
        ],
        generationConfig: {
          temperature: 0.1, // Lower temperature for more predictable exercises
          topP: 0.45,
          topK: 40,
          maxOutputTokens: 8192,
          responseMimeType: "application/json",
          responseSchema: exerciseResponseSchema,
        },
      });

      // Map numeric level (1-6) to descriptive difficulty
      let targetLevelDesc: string;
      if (level <= 2) {
        targetLevelDesc = 'Easy';
      } else if (level <= 4) {
        targetLevelDesc = 'Medium';
      } else {
        targetLevelDesc = 'Hard';
      }

      const prompt = `
        B·∫°n l√† m·ªôt tr·ª£ l√Ω AI chuy√™n nghi·ªáp, b·∫≠c th·∫ßy trong vi·ªác t·∫°o ra c√°c b√†i t·∫≠p ti·∫øng Anh ƒëa d·∫°ng v√† ph√π h·ª£p v·ªõi t·ª´ng c·∫•p ƒë·ªô t·ª´ n·ªôi dung m·∫°ng x√£ h·ªôi. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch s√¢u s·∫Øc m·ªôt b√†i vi·∫øt (ti√™u ƒë·ªÅ, m√¥ t·∫£, n·ªôi dung chi ti·∫øt) v√† h√¨nh ·∫£nh ƒëi k√®m (n·∫øu c√≥) ƒë·ªÉ x√¢y d·ª±ng c√°c c√¢u h·ªèi tr·∫Øc nghi·ªám ch·∫•t l∆∞·ª£ng cao, ki·ªÉm tra nhi·ªÅu k·ªπ nƒÉng kh√°c nhau cho ng∆∞·ªùi h·ªçc ti·∫øng Anh.

        Ph√¢n t√≠ch b√†i vi·∫øt sau:

           ID B√†i vi·∫øt: ${postData.id}
           Ti√™u ƒë·ªÅ: ${postData.title || 'Kh√¥ng c√≥'}
           M√¥ t·∫£: ${postData.description || 'Kh√¥ng c√≥'}
           C√°c b∆∞·ªõc/N·ªôi dung chi ti·∫øt: ${postData.steps ? postData.steps.join('\n') : 'Kh√¥ng c√≥'}
           URL H√¨nh ·∫£nh: ${postData.mainImage || 'Kh√¥ng c√≥ h√¨nh ·∫£nh'}

        Y√™u c·∫ßu:

        1.  Ph√¢n t√≠ch Chuy√™n s√¢u: ƒê·ªçc hi·ªÉu vƒÉn b·∫£n V√Ä ph√¢n t√≠ch h√¨nh ·∫£nh (n·∫øu c√≥) m·ªôt c√°ch k·ªπ l∆∞·ª°ng. X√°c ƒë·ªãnh kh√¥ng ch·ªâ t·ª´ v·ª±ng/ng·ªØ ph√°p r√µ r√†ng m√† c√≤n c·∫£ c√°c c·∫•u tr√∫c ·∫©n √Ω, s·∫Øc th√°i nghƒ©a, c√°ch di·ªÖn ƒë·∫°t t·ª± nhi√™n, v√† ki·∫øn th·ª©c vƒÉn h√≥a (n·∫øu c√≥) li√™n quan ƒë·∫øn ti·∫øng Anh.
        2.  ƒê√°nh gi√° M·ª©c ƒë·ªô li√™n quan: N·ªôi dung c√≥ tr·ª±c ti·∫øp d·∫°y, minh h·ªça, ho·∫∑c cung c·∫•p ng·ªØ c·∫£nh th·ª±c t·∫ø cho vi·ªác h·ªçc ti·∫øng Anh kh√¥ng?
        3.  T·∫°o B√†i t·∫≠p ƒêa d·∫°ng (N·∫øu li√™n quan):
           D·ª±a tr√™n ph√¢n t√≠ch, t·∫°o ra 4 c√¢u h·ªèi tr·∫Øc nghi·ªám (A, B, C, D). C√¢u h·ªèi b·∫±ng ti·∫øng Vi·ªát, ƒë√°p √°n b·∫±ng ti·∫øng Anh.
           ƒêa d·∫°ng h√≥a lo·∫°i c√¢u h·ªèi: K·∫øt h·ª£p nhi·ªÅu d·∫°ng ƒë·ªÉ ki·ªÉm tra to√†n di·ªán, m·ªói lo·∫°i c√¢u h·ªèi l·∫•y 1:
               T·ª´ v·ª±ng: Nghƒ©a c·ªßa t·ª´/c·ª•m t·ª´ trong ng·ªØ c·∫£nh, t·ª´ ƒë·ªìng nghƒ©a/tr√°i nghƒ©a, collocations (k·∫øt h·ª£p t·ª´), phrasal verbs, idioms (th√†nh ng·ªØ).
               Ng·ªØ ph√°p: Ch·ªçn c·∫•u tr√∫c ƒë√∫ng, s·ª≠a l·ªói sai, s·ª≠ d·ª•ng th√¨/d·∫°ng ph√π h·ª£p, c·∫•u tr√∫c c√¢u ph·ª©c t·∫°p (m·ªánh ƒë·ªÅ, c√¢u ƒëi·ªÅu ki·ªán, b·ªã ƒë·ªông...).
               ƒê·ªçc hi·ªÉu: T√¨m √Ω ch√≠nh, chi ti·∫øt c·ª• th·ªÉ, suy lu·∫≠n (inference), hi·ªÉu th√°i ƒë·ªô/m·ª•c ƒë√≠ch c·ªßa t√°c gi·∫£, li√™n k·∫øt th√¥ng tin gi·ªØa vƒÉn b·∫£n v√† h√¨nh ·∫£nh.
               ƒêi·ªÅn v√†o ch·ªó tr·ªëng (Gap-fill): Ch·ªçn t·ª´/c·ª•m t·ª´ ph√π h·ª£p nh·∫•t ƒë·ªÉ ho√†n th√†nh c√¢u.
               ·ª®ng d·ª•ng th·ª±c t·∫ø (Situational): ƒê∆∞a ra m·ªôt t√¨nh hu·ªëng ng·∫Øn g·ªçn li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ b√†i vi·∫øt, y√™u c·∫ßu ch·ªçn c√°ch di·ªÖn ƒë·∫°t/ph·∫£n h·ªìi b·∫±ng ti·∫øng Anh ph√π h·ª£p nh·∫•t, th·ªÉ hi·ªán s·ª± hi·ªÉu bi·∫øt v·ªÅ ki·∫øn th·ª©c ƒë√£ h·ªçc.
           Ph√¢n h√≥a ƒê·ªô kh√≥ R√µ r·ªát (${targetLevelDesc}): ƒêi·ªÅu ch·ªânh ƒë·ªô ph·ª©c t·∫°p c·ªßa c√¢u h·ªèi, t·ª´ v·ª±ng, c·∫•u tr√∫c ng·ªØ ph√°p, v√† c√°c ph∆∞∆°ng √°n g√¢y nhi·ªÖu (distractors) m·ªôt c√°ch tinh vi cho t·ª´ng c·∫•p ƒë·ªô:

               Easy:
               Tr·ªçng t√¢m: Nh·∫≠n bi·∫øt t·ª´ v·ª±ng c∆° b·∫£n, c·∫•u tr√∫c c√¢u ƒë∆°n gi·∫£n (S-V-O), th√¨ hi·ªán t·∫°i ƒë∆°n/ti·∫øp di·ªÖn, qu√° kh·ª© ƒë∆°n c∆° b·∫£n. T√¨m th√¥ng tin tr·ª±c ti·∫øp, r√µ r√†ng trong b√†i.
               C√¢u h·ªèi: Ch·ªß y·∫øu l√† "C√°i g√¨?", "·ªû ƒë√¢u?", "Ai?", ch·ªçn t·ª´ ƒë√∫ng nghƒ©a ƒëen, ho√†n th√†nh c√¢u r·∫•t ƒë∆°n gi·∫£n.
               V√≠ d·ª• lo·∫°i c√¢u h·ªèi: Ch·ªçn nghƒ©a ƒë√∫ng c·ªßa m·ªôt t·ª´ r·∫•t ph·ªï bi·∫øn trong b√†i; ƒêi·ªÅn m·ªôt gi·ªõi t·ª´ c∆° b·∫£n v√†o ch·ªó tr·ªëng; T√¨m m·ªôt chi ti·∫øt ƒë∆∞·ª£c n√™u r√µ trong 1-2 c√¢u ƒë·∫ßu.
               Ph∆∞∆°ng √°n nhi·ªÖu: R·∫•t kh√°c bi·ªát, d·ªÖ lo·∫°i tr·ª´ (sai nghƒ©a ho√†n to√†n, sai ng·ªØ ph√°p c∆° b·∫£n).

               Medium:
               Tr·ªçng t√¢m: Hi·ªÉu √Ω ch√≠nh, suy lu·∫≠n ƒë∆°n gi·∫£n, t·ª´ v·ª±ng ph·ªï bi·∫øn v√† m·ªôt s·ªë collocations/phrasal verbs th√¥ng d·ª•ng, c√°c th√¨ ph·ª©c t·∫°p h∆°n (hi·ªán t·∫°i ho√†n th√†nh, qu√° kh·ª© ti·∫øp di·ªÖn), c√¢u ƒëi·ªÅu ki·ªán lo·∫°i 1 & 2, b·ªã ƒë·ªông c∆° b·∫£n, m·ªánh ƒë·ªÅ quan h·ªá ƒë∆°n gi·∫£n.
               C√¢u h·ªèi: Y√™u c·∫ßu hi·ªÉu h√†m √Ω c∆° b·∫£n, t√≥m t·∫Øt √Ω, √°p d·ª•ng quy t·∫Øc ng·ªØ ph√°p v√†o ng·ªØ c·∫£nh t∆∞∆°ng t·ª±, ph√¢n bi·ªát t·ª´ g·∫ßn nghƒ©a th√¥ng d·ª•ng, ch·ªçn c√¢u tr·∫£ l·ªùi ph√π h·ª£p trong m·ªôt t√¨nh hu·ªëng ƒë∆°n gi·∫£n.
               V√≠ d·ª• lo·∫°i c√¢u h·ªèi: T·ª´ n√†o ƒë·ªìng nghƒ©a v·ªõi X trong ƒëo·∫°n vƒÉn?; T·∫°i sao t√°c gi·∫£ ƒë·ªÅ c·∫≠p ƒë·∫øn Y?; Ch·ªçn th√¨ ƒë√∫ng cho ƒë·ªông t·ª´ trong c√¢u Z; N·∫øu b·∫°n ·ªü trong t√¨nh hu·ªëng m√¥ t·∫£, b·∫°n s·∫Ω n√≥i g√¨ (ch·ªçn c√¢u ƒë∆°n gi·∫£n, tr·ª±c ti·∫øp)?
               Ph∆∞∆°ng √°n nhi·ªÖu: C√≥ v·∫ª h·ª£p l√Ω v·ªÅ ch·ªß ƒë·ªÅ nh∆∞ng sai v·ªÅ chi ti·∫øt, ng·ªØ ph√°p, ho·∫∑c s·∫Øc th√°i nghƒ©a trong ng·ªØ c·∫£nh c√¢u h·ªèi.

               Hard:
               Tr·ªçng t√¢m: Ph√¢n t√≠ch s√¢u, suy lu·∫≠n ph·ª©c t·∫°p, hi·ªÉu ·∫©n √Ω/th√°i ƒë·ªô/m·ª•c ƒë√≠ch, t·ª´ v·ª±ng n√¢ng cao/h·ªçc thu·∫≠t/chuy√™n ng√†nh (n·∫øu c√≥), idioms, phrasal verbs ph·ª©c t·∫°p, c·∫•u tr√∫c ng·ªØ ph√°p tinh vi (ƒë·∫£o ng·ªØ, c√¢u ch·∫ª, ƒëi·ªÅu ki·ªán h·ªón h·ª£p/lo·∫°i 3, m·ªánh ƒë·ªÅ ph√¢n t·ª´, b·ªã ƒë·ªông n√¢ng cao), t·ª´ v·ª±ng th·∫≠t kh√≥, hi·∫øm g·∫∑p, b·∫Øt bu·ªôc c√≥ h√†nh ng·ªØ,...
               C√¢u h·ªèi: Y√™u c·∫ßu ph√¢n t√≠ch d·ª•ng √Ω t√°c gi·∫£, ƒë√°nh gi√° th√¥ng tin, t·ªïng h·ª£p √Ω t·ª´ nhi·ªÅu ngu·ªìn (vƒÉn b·∫£n + h√¨nh ·∫£nh), hi·ªÉu s·∫Øc th√°i nghƒ©a tinh t·∫ø, √°p d·ª•ng ki·∫øn th·ª©c v√†o t√¨nh hu·ªëng ph·ª©c t·∫°p ho·∫∑c tr·ª´u t∆∞·ª£ng, ch·ªçn c√°ch di·ªÖn ƒë·∫°t t·ª± nhi√™n v√† ph√π h·ª£p nh·∫•t v·ªÅ vƒÉn phong.
               V√≠ d·ª• lo·∫°i c√¢u h·ªèi: Th√°i ƒë·ªô c·ªßa t√°c gi·∫£ ƒë·ªëi v·ªõi v·∫•n ƒë·ªÅ X l√† g√¨?; H√†m √Ω ch√≠nh c·ªßa h√¨nh ·∫£nh khi k·∫øt h·ª£p v·ªõi ƒëo·∫°n vƒÉn l√† g√¨?; Ch·ªçn c·∫•u tr√∫c ng·ªØ ph√°p n√¢ng cao (vd: ƒë·∫£o ng·ªØ) ph√π h·ª£p nh·∫•t ƒë·ªÉ di·ªÖn ƒë·∫°t l·∫°i √Ω Y; Trong t√¨nh hu·ªëng Z ph·ª©c t·∫°p, c√°ch ph·∫£n h·ªìi n√†o th·ªÉ hi·ªán s·ª± tinh t·∫ø/l·ªãch s·ª±/chuy√™n nghi·ªáp nh·∫•t (ch·ªçn c√¢u ph·ª©c t·∫°p, c√≥ s·∫Øc th√°i)?
               Ph∆∞∆°ng √°n nhi·ªÖu: R·∫•t tinh vi, d·ªÖ g√¢y nh·∫ßm l·∫´n, ki·ªÉm tra s·ª± kh√°c bi·ªát nh·ªè v·ªÅ nghƒ©a/c√°ch d√πng, c√°c l·ªói sai ph·ªï bi·∫øn ·ªü tr√¨nh ƒë·ªô cao, ho·∫∑c c√°c l·ª±a ch·ªçn ƒë√∫ng m·ªôt ph·∫ßn nh∆∞ng kh√¥ng ph·∫£i l√† t·ªët nh·∫•t.

           Ng√¥n ng·ªØ: C√¢u h·ªèi (ti·∫øng Vi·ªát) v√† c√°c l·ª±a ch·ªçn A, B, C, D (ti·∫øng Anh).
           ƒê√°p √°n & Gi·∫£i th√≠ch Chi ti·∫øt: Cung c·∫•p ƒë√°p √°n ƒë√∫ng (ch·ªØ c√°i A/B/C/D) v√† gi·∫£i th√≠ch b·∫±ng Ti·∫øng Vi·ªát c·ª±c k·ª≥ r√µ r√†ng, logic. Ph·∫£i ch·ªâ r√µ:
               T·∫°i sao ƒë√°p √°n ƒë√∫ng (d·ª±a v√†o ƒë√¢u trong b√†i/h√¨nh ·∫£nh? quy t·∫Øc ng·ªØ ph√°p/t·ª´ v·ª±ng n√†o? logic suy lu·∫≠n?).
               T·∫°i sao t·ª´ng ph∆∞∆°ng √°n sai l·∫°i kh√¥ng ch√≠nh x√°c (sai ·ªü ƒëi·ªÉm n√†o: ng·ªØ ph√°p, t·ª´ v·ª±ng, logic, kh√¥ng li√™n quan, kh√¥ng ph√π h·ª£p ng·ªØ c·∫£nh/vƒÉn phong?).
        4.  Tr∆∞·ªùng h·ª£p Kh√¥ng li√™n quan: N·∫øu n·ªôi dung kh√¥ng ƒë·ªß ch·∫•t l∆∞·ª£ng ho·∫∑c kh√¥ng li√™n quan ƒë·∫øn ti·∫øng Anh ƒë·ªÉ t·∫°o b√†i t·∫≠p √Ω nghƒ©a ·ªü c·∫•p ƒë·ªô y√™u c·∫ßu, gi·∫£i th√≠ch r√µ l√Ω do trong 'analysisSummary' v√† ƒë·ªÉ tr·ªëng 'exercises'.
        5.  ƒê·ªãnh d·∫°ng Output: TUY·ªÜT ƒê·ªêI CH√çNH X√ÅC tr·∫£ v·ªÅ k·∫øt qu·∫£ d·∫°ng JSON theo 'responseSchema'. ƒê·∫£m b·∫£o m·ªçi tr∆∞·ªùng b·∫Øt bu·ªôc ƒë·ªÅu c√≥ m·∫∑t, ƒë√∫ng ki·ªÉu d·ªØ li·ªáu, v√† n·ªôi dung logic.

        H√£y v·∫≠n d·ª•ng s·ª± s√°ng t·∫°o v√† ki·∫øn th·ª©c chuy√™n s√¢u v·ªÅ ng√¥n ng·ªØ ƒë·ªÉ t·∫°o ra nh·ªØng b√†i t·∫≠p th·ª±c s·ª± th·ª≠ th√°ch v√† h·ªØu √≠ch, ph·∫£n √°nh ch√≠nh x√°c ƒë·ªô kh√≥ y√™u c·∫ßu (${targetLevelDesc}).
        `;

      const chatSession = model.startChat({
        history: [],
        // generationConfig is already set in getGenerativeModel
      });

      const parts: Part[] = [{ text: prompt }]; // Initialize parts with the text prompt

      // Fetch image data if URL exists and add it to the parts
      if (postData.mainImage) {
        try {
          // Basic MIME type detection based on common extensions
          let imageMimeType = 'image/jpeg'; // Default
          const extension = postData.mainImage.split('.').pop()?.toLowerCase();
          if (extension === 'png') {
            imageMimeType = 'image/png';
          } else if (extension === 'gif') {
            imageMimeType = 'image/gif';
          } else if (extension === 'webp') {
            imageMimeType = 'image/webp';
          }
          // Add more types if needed

          const imagePart = await this.urlToGenerativePart(postData.mainImage, imageMimeType);
          parts.push(imagePart); // Add the image part
        } catch (imageError) {
          console.warn(`Could not fetch or process image for post ${postId}: ${imageError.message}. Proceeding without image.`);
          // Optionally add a note to the prompt that the image couldn't be processed
          // parts[0].text += "\n\nL∆∞u √Ω: Kh√¥ng th·ªÉ t·∫£i ho·∫∑c x·ª≠ l√Ω h√¨nh ·∫£nh ƒë∆∞·ª£c cung c·∫•p.";
        }
      }

      const result = await chatSession.sendMessage(parts);
      const responseText = result.response.text();

      // Log the raw response for debugging
      // console.log("Raw Gemini Response for Exercise Generation:", responseText);

      try {
        // Gemini should return valid JSON because of responseSchema
        const parsedData: ExerciseSchema = JSON.parse(responseText);
        return parsedData;
      } catch (parseError) {
        console.error("Failed to parse Gemini JSON response for exercises:", parseError);
        console.error("Raw response was:", responseText);
        throw new InternalServerErrorException('Failed to parse AI exercise generation response');
      }

    } catch (error) {
      console.error("Error during exercise generation:", error);
      if (error instanceof NotFoundException || error instanceof InternalServerErrorException) {
        throw error;
      }
      // Log the specific Gemini API error if available
      if (error.response && error.response.data) {
          console.error("Gemini API Error:", error.response.data);
      } else if (error.message) {
          console.error("Gemini SDK/Request Error:", error.message);
      }
      throw new InternalServerErrorException('Failed to generate exercises with AI');
    }
  }
  async phanTichPost(postID: number): Promise<any> {
    try {
      const postData = await this.postsRepository.findOne({
         where: { id: postID },
         relations: ['author'] // Ensure author is loaded if needed later, though not directly used in prompt
        });

      if (!postData) {
        throw new NotFoundException('Post not found');
      }

      // It's highly recommended to store API keys in environment variables
      const API_KEY = process.env.GEMINI_API_KEY || "AIzaSyCpO5z7jxHYM6JDa6eSQs8lx4atAjPWgVw";
      const MODEL_NAME = "gemini-2.0-flash"; // Use gemini-1.5-flash as it supports image input

      const genAI = new GoogleGenerativeAI(API_KEY);
      const model = genAI.getGenerativeModel({
         model: MODEL_NAME,
         // Safety settings can be adjusted as needed
         safetySettings: [
            { category: HarmCategory.HARM_CATEGORY_HARASSMENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
            { category: HarmCategory.HARM_CATEGORY_HATE_SPEECH, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
            { category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
            { category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE },
         ],
        });

      const generationConfig = {
        temperature: 0, // Adjust temperature for creativity vs. factuality
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 8192, // Adjust as needed
        responseMimeType: "application/json",
        responseSchema: {
          type: SchemaType.OBJECT,
          properties: {
            overview: {
              type: SchemaType.STRING,
              description: "T√≥m t·∫Øt chung v·ªÅ n·ªôi dung b√†i vi·∫øt v√† h√¨nh ·∫£nh (n·∫øu c√≥).",
            },
            isEnglishRelated: {
              type: SchemaType.BOOLEAN,
              description: "X√°c ƒë·ªãnh b√†i vi·∫øt c√≥ li√™n quan tr·ª±c ti·∫øp ƒë·∫øn vi·ªác h·ªçc ti·∫øng Anh hay kh√¥ng.",
            },
            englishKnowledge: {
              type: SchemaType.ARRAY,
              description: "Ch·ªâ bao g·ªìm n·∫øu isEnglishRelated l√† true. Chi ti·∫øt v·ªÅ c√°c ƒëi·ªÉm ki·∫øn th·ª©c ti·∫øng Anh.",
              items: {
                type: SchemaType.OBJECT,
                properties: {
                  topic: {
                    type: SchemaType.STRING,
                    description: "Ch·ªß ƒë·ªÅ ng·ªØ ph√°p ho·∫∑c t·ª´ v·ª±ng ch√≠nh (v√≠ d·ª•: 'Passive Voice', 'Present Perfect', 'Vocabulary: Travel').",
                  },
                  details: {
                    type: SchemaType.ARRAY,
                    description: "Gi·∫£i th√≠ch chi ti·∫øt, quy t·∫Øc ng·ªØ ph√°p, c√¥ng th·ª©c li√™n quan ƒë·∫øn ch·ªß ƒë·ªÅ.",
                    items: { type: SchemaType.STRING },
                  },
                  examples: {
                    type: SchemaType.ARRAY,
                    description: "C√°c c√¢u v√≠ d·ª• minh h·ªça cho ch·ªß ƒë·ªÅ.",
                    items: { type: SchemaType.STRING },
                  },
                },
                required: ["topic", "details", "examples"],
              },
            },
            learningTips: {
              type: SchemaType.ARRAY,
              description: "Ch·ªâ bao g·ªìm n·∫øu isEnglishRelated l√† true. C√°c m·∫πo h·ªçc t·∫≠p, ghi nh·ªõ li√™n quan ƒë·∫øn ki·∫øn th·ª©c trong b√†i.",
              items: { type: SchemaType.STRING },
            },
            wittyAnalysis: {
              type: SchemaType.STRING,
              description: "Ch·ªâ bao g·ªìm n·∫øu isEnglishRelated l√† false. M·ªôt ph√¢n t√≠ch ng·∫Øn g·ªçn, h√†i h∆∞·ªõc, ho·∫∑c l√©m l·ªânh v·ªÅ n·ªôi dung b√†i vi·∫øt v√† h√¨nh ·∫£nh.",
            },
          },
          required: ["overview", "isEnglishRelated"],
        },
      };

      const prompt = `
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ph√¢n t√≠ch n·ªôi dung m·∫°ng x√£ h·ªôi cho ng∆∞·ªùi h·ªçc ti·∫øng Anh. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ph√¢n t√≠ch b√†i vi·∫øt v√† h√¨nh ·∫£nh ƒëi k√®m (n·∫øu c√≥) ƒë·ªÉ cung c·∫•p th√¥ng tin h·ªØu √≠ch cho ng∆∞·ªùi d√πng.

Ph√¢n t√≠ch b√†i vi·∫øt sau:

   Ti√™u ƒë·ªÅ: ${postData.title}
   M√¥ t·∫£: ${postData.description}
   C√°c b∆∞·ªõc/N·ªôi dung chi ti·∫øt: ${postData.steps ? postData.steps.join('\n') : 'Kh√¥ng c√≥'}
   URL H√¨nh ·∫£nh: ${postData.mainImage || 'Kh√¥ng c√≥ h√¨nh ·∫£nh'}

Y√™u c·∫ßu:

1.  ƒê·ªçc v√† hi·ªÉu n·ªôi dung vƒÉn b·∫£n (ti√™u ƒë·ªÅ, m√¥ t·∫£, c√°c b∆∞·ªõc) V√Ä ph√¢n t√≠ch h√¨nh ·∫£nh t·ª´ URL ƒë∆∞·ª£c cung c·∫•p.
2.  ƒê√°nh gi√° t·ªïng quan: Cung c·∫•p m·ªôt c√°i nh√¨n chung v·ªÅ ch·ªß ƒë·ªÅ c·ªßa b√†i vi·∫øt v√† h√¨nh ·∫£nh.
3.  X√°c ƒë·ªãnh t√≠nh li√™n quan ƒë·∫øn ti·∫øng Anh: Quy·∫øt ƒë·ªãnh xem n·ªôi dung ch√≠nh c√≥ ph·∫£i v·ªÅ d·∫°y/h·ªçc ti·∫øng Anh kh√¥ng (ng·ªØ ph√°p, t·ª´ v·ª±ng, k·ªπ nƒÉng, m·∫πo h·ªçc...).
4.  N·∫øu li√™n quan ƒë·∫øn ti·∫øng Anh:
       Tr√≠ch xu·∫•t c√°c ch·ªß ƒë·ªÅ ki·∫øn th·ª©c ch√≠nh (v√≠ d·ª•: "C√¢u b·ªã ƒë·ªông", "T·ª´ v·ª±ng ch·ªß ƒë·ªÅ du l·ªãch").
       V·ªõi m·ªói ch·ªß ƒë·ªÅ, cung c·∫•p gi·∫£i th√≠ch chi ti·∫øt h∆°n, l√†m r√µ c√°c quy t·∫Øc, c√¥ng th·ª©c ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ho·∫∑c ·∫©n √Ω. ƒê·∫£m b·∫£o t√≠nh ch√≠nh x√°c v·ªÅ ng·ªØ ph√°p.
       Cung c·∫•p th√™m c√°c v√≠ d·ª• minh h·ªça r√µ r√†ng.
       ƒê·ªÅ xu·∫•t c√°c m·∫πo ph·∫£i ƒëi s√¢u, c·ª• th·ªÉ v√†o ki·∫øn th·ª©c ƒë√≥, kh√¥ng vi·∫øt chung chung.
5.  N·∫øu KH√îNG li√™n quan ƒë·∫øn ti·∫øng Anh:
       Cung c·∫•p m·ªôt ph√¢n t√≠ch d√≠ d·ªèm, h√†i h∆∞·ªõc, ho·∫∑c th√∫ v·ªã v·ªÅ n·ªôi dung b√†i vi·∫øt v√† h√¨nh ·∫£nh. Gi·ªØ th√°i ƒë·ªô t√≠ch c·ª±c v√† vui v·∫ª.
6.  Lu√¥n tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON theo ƒë√∫ng c·∫•u tr√∫c ƒë√£ ƒë·ªãnh nghƒ©a trong responseSchema. ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c tr∆∞·ªùng b·∫Øt bu·ªôc ƒë·ªÅu c√≥ m·∫∑t.

H√£y ph√¢n t√≠ch c·∫©n th·∫≠n c·∫£ vƒÉn b·∫£n v√† h√¨nh ·∫£nh ƒë·ªÉ ƒë∆∞a ra k·∫øt qu·∫£ ch√≠nh x√°c v√† h·ªØu √≠ch nh·∫•t b·∫±ng ti·∫øng Vi·ªát.
`;

      const chatSession = model.startChat({
        generationConfig,
        history: [
        ],
      });

      const parts: any[] = [prompt];

      // Fetch image data if URL exists and add it to the parts
      if (postData.mainImage) {
        // Assuming JPEG, adjust mime type if necessary (e.g., 'image/png')
        // You might need a more robust way to determine mime type if URLs vary
        const imageMimeType = 'image/jpeg'; // Or determine dynamically if possible
        const imagePart = await this.urlToGenerativePart(postData.mainImage, imageMimeType);
        parts.push(imagePart);
      }


      const result = await chatSession.sendMessage(parts);
      const responseText = result.response.text();

      // Log the raw response for debugging
      // console.log("Raw Gemini Response:", responseText);

      try {
        const parsedData: PostAnalysisSchema = JSON.parse(responseText);
        return parsedData;
      } catch (parseError) {
        console.error("Failed to parse Gemini JSON response:", parseError);
        console.error("Raw response was:", responseText);
        throw new InternalServerErrorException('Failed to parse AI analysis response');
      }

    } catch (error) {
      console.error("Error during post analysis:", error);
      if (error instanceof NotFoundException || error instanceof InternalServerErrorException) {
        throw error;
      }
      // Log the specific Gemini API error if available
      if (error.response && error.response.data) {
          console.error("Gemini API Error:", error.response.data);
      } else if (error.message) {
          console.error("Gemini SDK/Request Error:", error.message);
      }
      throw new InternalServerErrorException('Failed to analyze post with AI');
    }
  }







  async sendImageToAI(buffer: Buffer): Promise<any> {
    try{
      const { GoogleGenerativeAI } = require("@google/generative-ai");
      
      const genAI = new GoogleGenerativeAI("AIzaSyBEEXfHU_NM0mQUIrqitWBcc-JzIR-3ccw");
      function fileToGenerativePart(buf, mimeType) {
        return {
          inlineData: {
            data: buf.toString("base64"),
            mimeType
          },
        };
      }
      const imageParts = [
        fileToGenerativePart(buffer, "image/jpeg")
      ]
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      const generationConfig = {
        temperature: 0.1,
        topP: 0.95,
        topK: 40,
        maxOutputTokens: 8192,
        responseMimeType: "application/json",
        responseSchema: {
          type: "object",
          description: "Danh s√°ch nguy√™n li·ªáu ph√¢n t√≠ch ƒë∆∞·ª£c t·ª´ trong ·∫£nh v√† t√™n c√°c m√≥n ƒÉn ch·∫ø bi·∫øn ƒë∆∞·ª£c ch·ªâ v·ªõi nh·ªØng nguy√™n li·ªáu ƒë√≥",
          properties: {
            ingredients: {
              type: "array",
              description: "Danh s√°ch nguy√™n li·ªáu ph√¢n t√≠ch ƒë∆∞·ª£c t·ª´ trong ·∫£nh",
              items: {
                type: "object",
                description: "Nguy√™n li·ªáu ph√¢n t√≠ch ƒë∆∞·ª£c t·ª´ trong ·∫£nh",
                properties: {
                  name: {
                    type: "string",
                    description: "T√™n nguy√™n li·ªáu"
                  },
                  quantity: {
                    type: "string",
                    description: "S·ªë l∆∞·ª£ng nguy√™n li·ªáu"
                  }
                },
                required: [
                  "name",
                  "quantity"
                ]
              }
            },
            recipes: {
              type: "array",
              description: "Danh s√°ch m√≥n ƒÉn ch·∫ø bi·∫øn ƒë∆∞·ª£c ch·ªâ v·ªõi nh·ªØng nguy√™n li·ªáu c√≥ s·∫µn, kh√¥ng c·∫ßn chu·∫©n b·ªã th√™m",
              items: {
                type: "string",
                description: "T√™n m√≥n ƒÉn"
              }
            }
          },
          required: [
            "ingredients",
            "recipes"
          ]
        },
      };
      const chatSession = model.startChat({
        generationConfig,
        history: [
        ],
      });
      const prompt = 
`
B·∫°n l√† tr·ª£ l√Ω AI chuy√™n ph√¢n t√≠ch nguy√™n li·ªáu v√† n·∫•u ƒÉn. T√¥i s·∫Ω g·ª≠i cho b·∫°n m·ªôt h√¨nh ·∫£nh l√† c√°c nguy√™n li·ªáu n·∫•u ƒÉn, t√¥i c·∫ßn b·∫°n ph√¢n t√≠ch h√¨nh ·∫£nh ƒë√≥ v√† t√¨m nh·ªØng m√≥n ƒÉn n·∫•u ƒë∆∞·ª£c ngay t·ª´ nh·ªØng nguy√™n li·ªáu ƒë√≥ m√† kh√¥ng c·∫ßn mua th√™m. Khi nh·∫≠n h√¨nh ·∫£nh nguy√™n li·ªáu, b·∫°n ph·∫£i ph√¢n t√≠ch v√† li·ªát k√™ ch√≠nh x√°c c√°c nguy√™n li·ªáu c√≥ trong ·∫£nh (bao g·ªìm s·ªë l∆∞·ª£ng c·ª• th·ªÉ nh∆∞ "1kg", "2 th√¨a canh", "3 qu·∫£").
Sau ƒë√≥ h√£y t·∫°o ra 3-6 m√≥n ƒÉn n·∫•u ƒë∆∞·ª£c lu√¥n v·ªõi nh·ªØng nguy√™n li·ªáu ƒë√£ c√≥, kh√¥ng c·∫ßn chu·∫©n b·ªã th√™m, ch·ªâ d√πng nh·ªØng nguy√™n li·ªáu ƒë√£ c√≥ ƒë·ªÉ t·∫°o m√≥n ƒÉn, kh√¥ng t·∫°o nh·ªØng m√≥n ƒÉn m√† thi·∫øu nguy√™n li·ªá.
M·ªói m√≥n ƒÉn t·∫°o ra ph·∫£i th·∫≠t h·ª£p l√Ω, th·ª±c t·∫ø, ƒÉn ƒë∆∞·ª£c. Ch·ªâ d√πng nh·ªØng nguy√™n li·ªáu ƒë√£ c√≥ ƒë·ªÉ t·∫°o m√≥n ƒÉn, kh√¥ng t·∫°o nh·ªØng m√≥n ƒÉn m√† thi·∫øu nguy√™n li·ªáu.
K·∫øt qu·∫£ tr·∫£ v·ªÅ l√† ti·∫øng vi·ªát.
`
      
      //const result = await model.generateContent([prompt, ...imageParts]);
      const result = await chatSession.sendMessage([prompt, ...imageParts]);

      const data = result.response.text();
      const parsedData = JSON.parse(data);
      return parsedData;
    } catch (error) {
      console.log(error);
      throw new Error('Failed to analyze image');
    }

  }
  async getRecipesByIngredients(getRecipeDto: GetRecipeDto ): Promise<any> {
    try{
      const { GoogleGenerativeAI } = require("@google/generative-ai");
      
      const genAI = new GoogleGenerativeAI("AIzaSyBEEXfHU_NM0mQUIrqitWBcc-JzIR-3ccw");
      const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      const generationConfig = {
        temperature: 1,
        topP: 0.5,
        topK: 40,
        maxOutputTokens: 8192,
        responseMimeType: "application/json",
        responseSchema: {
          type: "object",
          properties: {
            recipes: {
              type: "array",
              description: "Danh s√°ch c√¥ng th·ª©c n·∫•u ƒÉn",
              items: {
                type: "object",
                description: "C√¥ng th·ª©c n·∫•u ƒÉn",
                properties: {
                  name: {
                    type: "string",
                    description: "T√™n m√≥n ƒÉn, ph·∫£i th·∫≠t l√©m l·ªânh, h√†i h∆∞·ªõc, th√∫ v·ªã"
                  },
                  ingredients: {
                    type: "array",
                    description: "Danh s√°ch nguy√™n li·ªáu, s·ªë l∆∞·ª£ng nguy√™n li·ªáu c·∫ßn ch·∫ø bi·∫øn m√≥n ƒÉn",
                    items: {
                      type: "object",
                      properties: {
                        name: {
                          type: "string",
                          description: "T√™n nguy√™n li·ªáu"
                        },
                        quantity: {
                          type: "string",
                          description: "S·ªë l∆∞·ª£ng nguy√™n li·ªáu"
                        }
                      },
                      required: [
                        "name",
                        "quantity"
                      ]
                    }
                  },
                  steps: {
                    type: "array",
                    description: "Danh s√°ch c√°c b∆∞·ªõc n·∫•u ƒÉn, h∆∞·ªõng d·∫´n c√°ch ch·∫ø bi·∫øn m√≥n ƒÉn",
                    items: {
                      type: "string",
                      description: "B∆∞·ªõc n·∫•u ƒÉn, ph·∫£i th·∫≠t l√©m l·ªânh, h√†i h∆∞·ªõc, th√∫ v·ªã"
                    }
                  }
                },
                required: [
                  "name",
                  "ingredients",
                  "steps"
                ]
              }
            }
          },
          required: [
            "recipes"
          ]
        },
      };
      
      const chatSession = model.startChat({
        generationConfig,
        history: [
        ],
      });
      let prompt: any;
      prompt =
`
Nh·∫≠p vai th√†nh m·ªôt ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp, h√£y gi√∫p t√¥i x√¢y d·ª±ng c√°c c√¥ng th·ª©c n·∫•u ƒÉn ch·ªâ v·ªõi nh·ªØng nguy√™n li·ªáu c·ªßa t√¥i, kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng th√™m nguy√™n li·ªáu n√†o kh√°c.
C√°c m√≥n ƒÉn ph·∫£i th·ª±c t·∫ø, c√≥ th·∫≠t, ƒÉn ƒë∆∞·ª£c.
D∆∞·ªõi ƒë√¢y l√† danh s√°ch nguy√™n li·ªáu c·ªßa t√¥i:
${JSON.stringify(getRecipeDto, null, 2)}
Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh·ªØng nguy√™n li·ªáu tr√™n, t·∫°o cho t√¥i nh·ªØng nguy√™n li·ªáu v√† c√°c b∆∞·ªõc ƒë·ªÉ n·∫•u c√°c m√≥n ƒÉn th·∫≠t ngon t·ª´ nh·ªØng nguy√™n li·ªáu ƒë√≥.
C√°c b∆∞·ªõc n·∫•u ƒÉn ph·∫£i ƒë·ªß: s∆° ch·∫ø nguy√™n li·ªáu, ch·∫ø bi·∫øn m√≥n ƒÉn, tr√¨nh b√†y m√≥n ƒÉn.
C√°c b∆∞·ªõc h∆∞·ªõng d·∫´n ph·∫£i th·∫≠t h√†i h∆∞·ªõc, th√∫ v·ªã, l√©m l·ªânh, b·∫Øt ch∆∞·ªõc c√°ch n√≥i chuy·ªán h√†i h∆∞·ªõc c·ªßa gi·ªõi tr·∫ª, b·∫Øt ch∆∞·ªõc c√°ch s·ª≠ d·ª•ng nh·ªØng t·ª´ ng·ªØ trending, nh·ªØng t·ª´ gi·ªõi tr·∫ª hay d√πng. 
Pha c√°c tr√≤ ƒë√πa, c√¢u chuy·ªán, t√¨nh hu·ªëng h√†i h∆∞·ªõc v√†o b∆∞·ªõc ch·∫ø bi·∫øn m√≥n ƒÉn.
C√≥ th·ªÉ ·∫©n d·ª• tr√™u ƒë√πa (n·ªôi dung ng∆∞·ªùi l·ªõn nh∆∞ng t·∫ø nh·ªã).
`;

      if(getRecipeDto.recipes){
prompt = 
`
Nh·∫≠p vai th√†nh m·ªôt ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp, h√£y gi√∫p t√¥i x√¢y d·ª±ng c√°c c√¥ng th·ª©c n·∫•u ƒÉn ch·ªâ v·ªõi nh·ªØng nguy√™n li·ªáu c·ªßa t√¥i, kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng th√™m nguy√™n li·ªáu n√†o kh√°c.
C√°c m√≥n ƒÉn ph·∫£i th·ª±c t·∫ø, c√≥ th·∫≠t, ƒÉn ƒë∆∞·ª£c.
D∆∞·ªõi ƒë√¢y l√† danh s√°ch nguy√™n li·ªáu c·ªßa t√¥i:
${JSON.stringify(getRecipeDto, null, 2)}
Ch·ªâ ƒë∆∞·ª£c s·ª≠ d·ª•ng nh·ªØng nguy√™n li·ªáu tr√™n, t·∫°o cho t√¥i nh·ªØng nguy√™n li·ªáu v√† c√°c b∆∞·ªõc ƒë·ªÉ n·∫•u t·ª´ng m√≥n ƒÉn sau:
${JSON.stringify(getRecipeDto.recipes, null, 2)}
C√°c b∆∞·ªõc n·∫•u ƒÉn ph·∫£i ƒë·ªß: s∆° ch·∫ø nguy√™n li·ªáu, ch·∫ø bi·∫øn m√≥n ƒÉn, tr√¨nh b√†y m√≥n ƒÉn.
C√°c b∆∞·ªõc h∆∞·ªõng d·∫´n ph·∫£i th·∫≠t h√†i h∆∞·ªõc, th√∫ v·ªã, l√©m l·ªânh, b·∫Øt ch∆∞·ªõc c√°ch n√≥i chuy·ªán h√†i h∆∞·ªõc c·ªßa gi·ªõi tr·∫ª, b·∫Øt ch∆∞·ªõc c√°ch s·ª≠ d·ª•ng nh·ªØng t·ª´ ng·ªØ trending, nh·ªØng t·ª´ gi·ªõi tr·∫ª hay d√πng. 
Pha c√°c tr√≤ ƒë√πa, c√¢u chuy·ªán, t√¨nh hu·ªëng h√†i h∆∞·ªõc v√†o b∆∞·ªõc ch·∫ø bi·∫øn m√≥n ƒÉn.
C√≥ th·ªÉ ·∫©n d·ª• tr√™u ƒë√πa (n·ªôi dung ng∆∞·ªùi l·ªõn nh∆∞ng t·∫ø nh·ªã).
`
      }
      let result: any;
      if(getRecipeDto.note){
        const note = 
`
Ghi ch√∫ cho m√≥n ƒÉn:
${JSON.stringify(getRecipeDto.note, null, 2)}
`
        result = await chatSession.sendMessage([prompt,...note]);
      }
      else 
      {
        result = await chatSession.sendMessage(prompt);
      }
      console.log('ok2');
      const data = result.response.text();
      const parsedData = JSON.parse(data);
      return parsedData;
    } catch (error) {
      console.log(error);
      throw new Error('Failed get recipes by ingredients');
    }
  }
}

